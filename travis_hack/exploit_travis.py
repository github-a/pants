import copy
import os
import yaml
import subprocess
import logging
from travis_hack.credential import CREDS

logger = logging.getLogger('exp')
logging.basicConfig()
logger.setLevel(logging.DEBUG)

logger.debug(CREDS)


def main():
  def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
      yield l[i:i + n]

  travis_yml = None
  with open(".travis.yml", 'r') as stream:
    try:
      travis_yml = yaml.load(stream)
      logger.debug(travis_yml)
    except yaml.YAMLError as exc:
      logger.error(exc)

  if travis_yml is None:
    exit(1)

  matrix = travis_yml['env']['matrix']

  chunks = list(chunks(matrix, 5))

  new_configs = []

  for chunk in chunks:
    new_config = copy.deepcopy(travis_yml)
    new_config['env']['matrix'] = chunk
    new_configs.append(new_config)

  assert len(CREDS) >= len(new_configs)

  current_branch = subprocess.check_output('git rev-parse --abbrev-ref HEAD'.split(' ')).strip()
  logger.info('Current branch: {}'.format(current_branch))

  try:
    # current_branch = os.system('git branch | grep -e "^*" | cut -d' ' -f 2')
    for idx, config in enumerate(new_configs):
      status = subprocess.check_output('git status'.split(' ')).strip()
      if 'Changes to be committed' in status:
        logger.error("Repo not clean. Please commit/stash the changes first.")
        exit(1)

      # Check out a different branch
      tmp_branch = 'travis_exploit_tmp_br_{}'.format(idx)
      try:
        subprocess.check_output('git checkout -b {}'.format(tmp_branch).split(' '))
      except subprocess.CalledProcessError:
        logger.info("Checkout {} failed. likely branch already exists".format(tmp_branch))
        try:
          subprocess.check_output('git branch -D {}'.format(tmp_branch).split(' '))
        except subprocess.CalledProcessError:
          logger.error("Delete branch {} failed.".format(tmp_branch))
          exit(1)
        else:
          logger.info("Delete branch {} succeeded.".format(tmp_branch))
          try:
            subprocess.check_output('git checkout -b {}'.format(tmp_branch).split(' '))
          except subprocess.CalledProcessError:
            logger.error("Retry creating {} failed".format(tmp_branch))
            exit(1)
          else:
            logger.info('Checkout {} succeeded'.format(tmp_branch))

      # Overwrite existing .travis.yml
      cred = CREDS[idx]
      output_filename = '.travis.yml'
      with open(output_filename, 'w') as outfile:
        outfile.write(yaml.dump(config, default_flow_style=True))

      subprocess.check_output('git commit -am travis_exploit'.split(' '))
      # Commit change

      # Push
      username, password, repo = cred
      os.system('git push https://{}:{}@{} head:{} -f'.format(username, password, repo, tmp_branch))
      reset(current_branch)
  finally:
    reset(current_branch)


  exit(0)


def reset(current_branch):
  subprocess.check_output('git reset --hard'.split(' '))
  subprocess.check_output('git checkout {}'.format(current_branch).split(' '))


if __name__ == '__main__':
  main()
